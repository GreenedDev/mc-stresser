<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="240312674"><g><title>[ld-linux-x86-64.so.2] (2,132,968 samples, 0.89%)</title><rect x="0.1121%" y="469" width="0.8876%" height="15" fill="rgb(227,0,7)" fg:x="269355" fg:w="2132968"/><text x="0.3621%" y="479.50"></text></g><g><title>[unknown] (1,996,343 samples, 0.83%)</title><rect x="0.1689%" y="453" width="0.8307%" height="15" fill="rgb(217,0,24)" fg:x="405980" fg:w="1996343"/><text x="0.4189%" y="463.50"></text></g><g><title>[unknown] (1,996,343 samples, 0.83%)</title><rect x="0.1689%" y="437" width="0.8307%" height="15" fill="rgb(221,193,54)" fg:x="405980" fg:w="1996343"/><text x="0.4189%" y="447.50"></text></g><g><title>[unknown] (1,996,343 samples, 0.83%)</title><rect x="0.1689%" y="421" width="0.8307%" height="15" fill="rgb(248,212,6)" fg:x="405980" fg:w="1996343"/><text x="0.4189%" y="431.50"></text></g><g><title>[unknown] (1,996,343 samples, 0.83%)</title><rect x="0.1689%" y="405" width="0.8307%" height="15" fill="rgb(208,68,35)" fg:x="405980" fg:w="1996343"/><text x="0.4189%" y="415.50"></text></g><g><title>[unknown] (1,996,343 samples, 0.83%)</title><rect x="0.1689%" y="389" width="0.8307%" height="15" fill="rgb(232,128,0)" fg:x="405980" fg:w="1996343"/><text x="0.4189%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,378,606 samples, 0.99%)</title><rect x="0.0099%" y="517" width="0.9898%" height="15" fill="rgb(207,160,47)" fg:x="23735" fg:w="2378606"/><text x="0.2599%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,378,606 samples, 0.99%)</title><rect x="0.0099%" y="501" width="0.9898%" height="15" fill="rgb(228,23,34)" fg:x="23735" fg:w="2378606"/><text x="0.2599%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,378,606 samples, 0.99%)</title><rect x="0.0099%" y="485" width="0.9898%" height="15" fill="rgb(218,30,26)" fg:x="23735" fg:w="2378606"/><text x="0.2599%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,404,336 samples, 1.00%)</title><rect x="0.0000%" y="533" width="1.0005%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2404336"/><text x="0.2500%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,404,337 samples, 1.00%)</title><rect x="0.0000%" y="549" width="1.0005%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2404337"/><text x="0.2500%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (95,059 samples, 0.04%)</title><rect x="1.0007%" y="501" width="0.0396%" height="15" fill="rgb(240,193,28)" fg:x="2404762" fg:w="95059"/><text x="1.2507%" y="511.50"></text></g><g><title>std::thread::current::set_current (95,059 samples, 0.04%)</title><rect x="1.0007%" y="485" width="0.0396%" height="15" fill="rgb(216,20,37)" fg:x="2404762" fg:w="95059"/><text x="1.2507%" y="495.50"></text></g><g><title>std::sys::thread_local::guard::key::enable (95,059 samples, 0.04%)</title><rect x="1.0007%" y="469" width="0.0396%" height="15" fill="rgb(206,188,39)" fg:x="2404762" fg:w="95059"/><text x="1.2507%" y="479.50"></text></g><g><title>pthread_attr_init (30,818 samples, 0.01%)</title><rect x="1.0467%" y="469" width="0.0128%" height="15" fill="rgb(217,207,13)" fg:x="2515390" fg:w="30818"/><text x="1.2967%" y="479.50"></text></g><g><title>[unknown] (27,966 samples, 0.01%)</title><rect x="1.0479%" y="453" width="0.0116%" height="15" fill="rgb(231,73,38)" fg:x="2518242" fg:w="27966"/><text x="1.2979%" y="463.50"></text></g><g><title>[unknown] (27,966 samples, 0.01%)</title><rect x="1.0479%" y="437" width="0.0116%" height="15" fill="rgb(225,20,46)" fg:x="2518242" fg:w="27966"/><text x="1.2979%" y="447.50"></text></g><g><title>pthread_getattr_np (49,063 samples, 0.02%)</title><rect x="1.0402%" y="485" width="0.0204%" height="15" fill="rgb(210,31,41)" fg:x="2499821" fg:w="49063"/><text x="1.2902%" y="495.50"></text></g><g><title>[libc.so.6] (194,661 samples, 0.08%)</title><rect x="1.0005%" y="549" width="0.0810%" height="15" fill="rgb(221,200,47)" fg:x="2404337" fg:w="194661"/><text x="1.2505%" y="559.50"></text></g><g><title>[libc.so.6] (194,661 samples, 0.08%)</title><rect x="1.0005%" y="533" width="0.0810%" height="15" fill="rgb(226,26,5)" fg:x="2404337" fg:w="194661"/><text x="1.2505%" y="543.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (194,236 samples, 0.08%)</title><rect x="1.0007%" y="517" width="0.0808%" height="15" fill="rgb(249,33,26)" fg:x="2404762" fg:w="194236"/><text x="1.2507%" y="527.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (99,177 samples, 0.04%)</title><rect x="1.0402%" y="501" width="0.0413%" height="15" fill="rgb(235,183,28)" fg:x="2499821" fg:w="99177"/><text x="1.2902%" y="511.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::thread_info::set_current_info (50,114 samples, 0.02%)</title><rect x="1.0607%" y="485" width="0.0209%" height="15" fill="rgb(221,5,38)" fg:x="2548884" fg:w="50114"/><text x="1.3107%" y="495.50"></text></g><g><title>__errno_location (50,114 samples, 0.02%)</title><rect x="1.0607%" y="469" width="0.0209%" height="15" fill="rgb(247,18,42)" fg:x="2548884" fg:w="50114"/><text x="1.3107%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (181,316 samples, 0.08%)</title><rect x="1.0815%" y="357" width="0.0755%" height="15" fill="rgb(241,131,45)" fg:x="2599018" fg:w="181316"/><text x="1.3315%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (181,316 samples, 0.08%)</title><rect x="1.0815%" y="341" width="0.0755%" height="15" fill="rgb(249,31,29)" fg:x="2599018" fg:w="181316"/><text x="1.3315%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (181,316 samples, 0.08%)</title><rect x="1.0815%" y="325" width="0.0755%" height="15" fill="rgb(225,111,53)" fg:x="2599018" fg:w="181316"/><text x="1.3315%" y="335.50"></text></g><g><title>stress-test (2,789,046 samples, 1.16%)</title><rect x="0.0000%" y="565" width="1.1606%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="2789046"/><text x="0.2500%" y="575.50"></text></g><g><title>_start (190,029 samples, 0.08%)</title><rect x="1.0815%" y="549" width="0.0791%" height="15" fill="rgb(214,148,48)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="559.50"></text></g><g><title>__libc_start_main (190,029 samples, 0.08%)</title><rect x="1.0815%" y="533" width="0.0791%" height="15" fill="rgb(232,36,49)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="543.50"></text></g><g><title>[libc.so.6] (190,029 samples, 0.08%)</title><rect x="1.0815%" y="517" width="0.0791%" height="15" fill="rgb(209,103,24)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="527.50"></text></g><g><title>main (190,029 samples, 0.08%)</title><rect x="1.0815%" y="501" width="0.0791%" height="15" fill="rgb(229,88,8)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="511.50"></text></g><g><title>std::rt::lang_start_internal (190,029 samples, 0.08%)</title><rect x="1.0815%" y="485" width="0.0791%" height="15" fill="rgb(213,181,19)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="495.50"></text></g><g><title>std::rt::lang_start::{{closure}} (190,029 samples, 0.08%)</title><rect x="1.0815%" y="469" width="0.0791%" height="15" fill="rgb(254,191,54)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="479.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (190,029 samples, 0.08%)</title><rect x="1.0815%" y="453" width="0.0791%" height="15" fill="rgb(241,83,37)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="463.50"></text></g><g><title>stress_test::main (190,029 samples, 0.08%)</title><rect x="1.0815%" y="437" width="0.0791%" height="15" fill="rgb(233,36,39)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="447.50"></text></g><g><title>tokio::runtime::builder::Builder::build (190,029 samples, 0.08%)</title><rect x="1.0815%" y="421" width="0.0791%" height="15" fill="rgb(226,3,54)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (190,029 samples, 0.08%)</title><rect x="1.0815%" y="405" width="0.0791%" height="15" fill="rgb(245,192,40)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="415.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (190,029 samples, 0.08%)</title><rect x="1.0815%" y="389" width="0.0791%" height="15" fill="rgb(238,167,29)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="399.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (190,029 samples, 0.08%)</title><rect x="1.0815%" y="373" width="0.0791%" height="15" fill="rgb(232,182,51)" fg:x="2599017" fg:w="190029"/><text x="1.3315%" y="383.50"></text></g><g><title>clock_gettime (181,316 samples, 0.08%)</title><rect x="1.1606%" y="533" width="0.0755%" height="15" fill="rgb(231,60,39)" fg:x="2789046" fg:w="181316"/><text x="1.4106%" y="543.50"></text></g><g><title>[[vdso]] (181,316 samples, 0.08%)</title><rect x="1.1606%" y="517" width="0.0755%" height="15" fill="rgb(208,69,12)" fg:x="2789046" fg:w="181316"/><text x="1.4106%" y="527.50"></text></g><g><title>[unknown] (181,316 samples, 0.08%)</title><rect x="1.1606%" y="501" width="0.0755%" height="15" fill="rgb(235,93,37)" fg:x="2789046" fg:w="181316"/><text x="1.4106%" y="511.50"></text></g><g><title>[[heap]] (684,617 samples, 0.28%)</title><rect x="1.1606%" y="549" width="0.2849%" height="15" fill="rgb(213,116,39)" fg:x="2789046" fg:w="684617"/><text x="1.4106%" y="559.50"></text></g><g><title>connect (503,301 samples, 0.21%)</title><rect x="1.2360%" y="533" width="0.2094%" height="15" fill="rgb(222,207,29)" fg:x="2970362" fg:w="503301"/><text x="1.4860%" y="543.50"></text></g><g><title>[unknown] (503,301 samples, 0.21%)</title><rect x="1.2360%" y="517" width="0.2094%" height="15" fill="rgb(206,96,30)" fg:x="2970362" fg:w="503301"/><text x="1.4860%" y="527.50"></text></g><g><title>pow (201,065 samples, 0.08%)</title><rect x="2.3017%" y="341" width="0.0837%" height="15" fill="rgb(218,138,4)" fg:x="5531186" fg:w="201065"/><text x="2.5517%" y="351.50"></text></g><g><title>[libm.so.6] (201,065 samples, 0.08%)</title><rect x="2.3017%" y="325" width="0.0837%" height="15" fill="rgb(250,191,14)" fg:x="5531186" fg:w="201065"/><text x="2.5517%" y="335.50"></text></g><g><title>[[vdso]] (1,189,133 samples, 0.49%)</title><rect x="2.3865%" y="309" width="0.4948%" height="15" fill="rgb(239,60,40)" fg:x="5734952" fg:w="1189133"/><text x="2.6365%" y="319.50"></text></g><g><title>[unknown] (1,189,104 samples, 0.49%)</title><rect x="2.3865%" y="293" width="0.4948%" height="15" fill="rgb(206,27,48)" fg:x="5734981" fg:w="1189104"/><text x="2.6365%" y="303.50"></text></g><g><title>[unknown] (1,187,217 samples, 0.49%)</title><rect x="2.3873%" y="277" width="0.4940%" height="15" fill="rgb(225,35,8)" fg:x="5736868" fg:w="1187217"/><text x="2.6373%" y="287.50"></text></g><g><title>[unknown] (1,187,024 samples, 0.49%)</title><rect x="2.3873%" y="261" width="0.4939%" height="15" fill="rgb(250,213,24)" fg:x="5737061" fg:w="1187024"/><text x="2.6373%" y="271.50"></text></g><g><title>[unknown] (1,179,227 samples, 0.49%)</title><rect x="2.3906%" y="245" width="0.4907%" height="15" fill="rgb(247,123,22)" fg:x="5744858" fg:w="1179227"/><text x="2.6406%" y="255.50"></text></g><g><title>[unknown] (1,176,435 samples, 0.49%)</title><rect x="2.3917%" y="229" width="0.4895%" height="15" fill="rgb(231,138,38)" fg:x="5747650" fg:w="1176435"/><text x="2.6417%" y="239.50"></text></g><g><title>[unknown] (1,176,435 samples, 0.49%)</title><rect x="2.3917%" y="213" width="0.4895%" height="15" fill="rgb(231,145,46)" fg:x="5747650" fg:w="1176435"/><text x="2.6417%" y="223.50"></text></g><g><title>[unknown] (1,176,131 samples, 0.49%)</title><rect x="2.3919%" y="197" width="0.4894%" height="15" fill="rgb(251,118,11)" fg:x="5747954" fg:w="1176131"/><text x="2.6419%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,192,001 samples, 0.50%)</title><rect x="2.3853%" y="341" width="0.4960%" height="15" fill="rgb(217,147,25)" fg:x="5732251" fg:w="1192001"/><text x="2.6353%" y="351.50"></text></g><g><title>clock_gettime (1,192,001 samples, 0.50%)</title><rect x="2.3853%" y="325" width="0.4960%" height="15" fill="rgb(247,81,37)" fg:x="5732251" fg:w="1192001"/><text x="2.6353%" y="335.50"></text></g><g><title>std::time::Instant::elapsed (2,133,219 samples, 0.89%)</title><rect x="2.8814%" y="341" width="0.8877%" height="15" fill="rgb(209,12,38)" fg:x="6924252" fg:w="2133219"/><text x="3.1314%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2,133,219 samples, 0.89%)</title><rect x="2.8814%" y="325" width="0.8877%" height="15" fill="rgb(227,1,9)" fg:x="6924252" fg:w="2133219"/><text x="3.1314%" y="335.50"></text></g><g><title>clock_gettime (2,133,219 samples, 0.89%)</title><rect x="2.8814%" y="309" width="0.8877%" height="15" fill="rgb(248,47,43)" fg:x="6924252" fg:w="2133219"/><text x="3.1314%" y="319.50"></text></g><g><title>[[vdso]] (2,133,219 samples, 0.89%)</title><rect x="2.8814%" y="293" width="0.8877%" height="15" fill="rgb(221,10,30)" fg:x="6924252" fg:w="2133219"/><text x="3.1314%" y="303.50"></text></g><g><title>[unknown] (2,133,219 samples, 0.89%)</title><rect x="2.8814%" y="277" width="0.8877%" height="15" fill="rgb(210,229,1)" fg:x="6924252" fg:w="2133219"/><text x="3.1314%" y="287.50"></text></g><g><title>[unknown] (1,925,352 samples, 0.80%)</title><rect x="2.9678%" y="261" width="0.8012%" height="15" fill="rgb(222,148,37)" fg:x="7132119" fg:w="1925352"/><text x="3.2178%" y="271.50"></text></g><g><title>[unknown] (1,925,352 samples, 0.80%)</title><rect x="2.9678%" y="245" width="0.8012%" height="15" fill="rgb(234,67,33)" fg:x="7132119" fg:w="1925352"/><text x="3.2178%" y="255.50"></text></g><g><title>[unknown] (1,925,352 samples, 0.80%)</title><rect x="2.9678%" y="229" width="0.8012%" height="15" fill="rgb(247,98,35)" fg:x="7132119" fg:w="1925352"/><text x="3.2178%" y="239.50"></text></g><g><title>[unknown] (1,925,352 samples, 0.80%)</title><rect x="2.9678%" y="213" width="0.8012%" height="15" fill="rgb(247,138,52)" fg:x="7132119" fg:w="1925352"/><text x="3.2178%" y="223.50"></text></g><g><title>[unknown] (1,925,352 samples, 0.80%)</title><rect x="2.9678%" y="197" width="0.8012%" height="15" fill="rgb(213,79,30)" fg:x="7132119" fg:w="1925352"/><text x="3.2178%" y="207.50"></text></g><g><title>[unknown] (1,925,352 samples, 0.80%)</title><rect x="2.9678%" y="181" width="0.8012%" height="15" fill="rgb(246,177,23)" fg:x="7132119" fg:w="1925352"/><text x="3.2178%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (265,845 samples, 0.11%)</title><rect x="3.7690%" y="341" width="0.1106%" height="15" fill="rgb(230,62,27)" fg:x="9057473" fg:w="265845"/><text x="4.0190%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (53,565 samples, 0.02%)</title><rect x="3.8817%" y="341" width="0.0223%" height="15" fill="rgb(216,154,8)" fg:x="9328319" fg:w="53565"/><text x="4.1317%" y="351.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (102,725 samples, 0.04%)</title><rect x="4.1379%" y="309" width="0.0427%" height="15" fill="rgb(244,35,45)" fg:x="9943987" fg:w="102725"/><text x="4.3879%" y="319.50"></text></g><g><title>syscall (75,739 samples, 0.03%)</title><rect x="4.1492%" y="293" width="0.0315%" height="15" fill="rgb(251,115,12)" fg:x="9970973" fg:w="75739"/><text x="4.3992%" y="303.50"></text></g><g><title>[unknown] (75,739 samples, 0.03%)</title><rect x="4.1492%" y="277" width="0.0315%" height="15" fill="rgb(240,54,50)" fg:x="9970973" fg:w="75739"/><text x="4.3992%" y="287.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="4.1492%" y="261" width="0.0315%" height="15" fill="rgb(233,84,52)" fg:x="9970974" fg:w="75738"/><text x="4.3992%" y="271.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="4.1492%" y="245" width="0.0315%" height="15" fill="rgb(207,117,47)" fg:x="9970974" fg:w="75738"/><text x="4.3992%" y="255.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="4.1492%" y="229" width="0.0315%" height="15" fill="rgb(249,43,39)" fg:x="9970974" fg:w="75738"/><text x="4.3992%" y="239.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="4.1492%" y="213" width="0.0315%" height="15" fill="rgb(209,38,44)" fg:x="9970974" fg:w="75738"/><text x="4.3992%" y="223.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="4.1492%" y="197" width="0.0315%" height="15" fill="rgb(236,212,23)" fg:x="9970974" fg:w="75738"/><text x="4.3992%" y="207.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="4.1492%" y="181" width="0.0315%" height="15" fill="rgb(242,79,21)" fg:x="9970974" fg:w="75738"/><text x="4.3992%" y="191.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="4.1492%" y="165" width="0.0315%" height="15" fill="rgb(211,96,35)" fg:x="9970974" fg:w="75738"/><text x="4.3992%" y="175.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="4.1492%" y="149" width="0.0315%" height="15" fill="rgb(253,215,40)" fg:x="9970974" fg:w="75738"/><text x="4.3992%" y="159.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (895,439 samples, 0.37%)</title><rect x="4.1807%" y="293" width="0.3726%" height="15" fill="rgb(211,81,21)" fg:x="10046712" fg:w="895439"/><text x="4.4307%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (668,028 samples, 0.28%)</title><rect x="4.2753%" y="277" width="0.2780%" height="15" fill="rgb(208,190,38)" fg:x="10274123" fg:w="668028"/><text x="4.5253%" y="287.50"></text></g><g><title>tokio::runtime::context::with_scheduler (668,028 samples, 0.28%)</title><rect x="4.2753%" y="261" width="0.2780%" height="15" fill="rgb(235,213,38)" fg:x="10274123" fg:w="668028"/><text x="4.5253%" y="271.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (425,893 samples, 0.18%)</title><rect x="4.3761%" y="245" width="0.1772%" height="15" fill="rgb(237,122,38)" fg:x="10516258" fg:w="425893"/><text x="4.6261%" y="255.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1,179,044 samples, 0.49%)</title><rect x="4.1807%" y="309" width="0.4906%" height="15" fill="rgb(244,218,35)" fg:x="10046712" fg:w="1179044"/><text x="4.4307%" y="319.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (283,605 samples, 0.12%)</title><rect x="4.5533%" y="293" width="0.1180%" height="15" fill="rgb(240,68,47)" fg:x="10942151" fg:w="283605"/><text x="4.8033%" y="303.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (207,867 samples, 0.09%)</title><rect x="4.5848%" y="277" width="0.0865%" height="15" fill="rgb(210,16,53)" fg:x="11017889" fg:w="207867"/><text x="4.8348%" y="287.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (207,867 samples, 0.09%)</title><rect x="4.5848%" y="261" width="0.0865%" height="15" fill="rgb(235,124,12)" fg:x="11017889" fg:w="207867"/><text x="4.8348%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (744,505 samples, 0.31%)</title><rect x="4.6713%" y="293" width="0.3098%" height="15" fill="rgb(224,169,11)" fg:x="11225756" fg:w="744505"/><text x="4.9213%" y="303.50"></text></g><g><title>clock_gettime (744,505 samples, 0.31%)</title><rect x="4.6713%" y="277" width="0.3098%" height="15" fill="rgb(250,166,2)" fg:x="11225756" fg:w="744505"/><text x="4.9213%" y="287.50"></text></g><g><title>[[vdso]] (744,505 samples, 0.31%)</title><rect x="4.6713%" y="261" width="0.3098%" height="15" fill="rgb(242,216,29)" fg:x="11225756" fg:w="744505"/><text x="4.9213%" y="271.50"></text></g><g><title>[unknown] (744,505 samples, 0.31%)</title><rect x="4.6713%" y="245" width="0.3098%" height="15" fill="rgb(230,116,27)" fg:x="11225756" fg:w="744505"/><text x="4.9213%" y="255.50"></text></g><g><title>[unknown] (744,505 samples, 0.31%)</title><rect x="4.6713%" y="229" width="0.3098%" height="15" fill="rgb(228,99,48)" fg:x="11225756" fg:w="744505"/><text x="4.9213%" y="239.50"></text></g><g><title>[unknown] (744,505 samples, 0.31%)</title><rect x="4.6713%" y="213" width="0.3098%" height="15" fill="rgb(253,11,6)" fg:x="11225756" fg:w="744505"/><text x="4.9213%" y="223.50"></text></g><g><title>[unknown] (740,400 samples, 0.31%)</title><rect x="4.6730%" y="197" width="0.3081%" height="15" fill="rgb(247,143,39)" fg:x="11229861" fg:w="740400"/><text x="4.9230%" y="207.50"></text></g><g><title>[unknown] (740,400 samples, 0.31%)</title><rect x="4.6730%" y="181" width="0.3081%" height="15" fill="rgb(236,97,10)" fg:x="11229861" fg:w="740400"/><text x="4.9230%" y="191.50"></text></g><g><title>[unknown] (740,400 samples, 0.31%)</title><rect x="4.6730%" y="165" width="0.3081%" height="15" fill="rgb(233,208,19)" fg:x="11229861" fg:w="740400"/><text x="4.9230%" y="175.50"></text></g><g><title>[unknown] (497,236 samples, 0.21%)</title><rect x="4.7742%" y="149" width="0.2069%" height="15" fill="rgb(216,164,2)" fg:x="11473025" fg:w="497236"/><text x="5.0242%" y="159.50"></text></g><g><title>std::time::Instant::saturating_duration_since (120,940 samples, 0.05%)</title><rect x="4.9811%" y="293" width="0.0503%" height="15" fill="rgb(220,129,5)" fg:x="11970261" fg:w="120940"/><text x="5.2311%" y="303.50"></text></g><g><title>[[vdso]] (120,940 samples, 0.05%)</title><rect x="4.9811%" y="277" width="0.0503%" height="15" fill="rgb(242,17,10)" fg:x="11970261" fg:w="120940"/><text x="5.2311%" y="287.50"></text></g><g><title>[unknown] (120,940 samples, 0.05%)</title><rect x="4.9811%" y="261" width="0.0503%" height="15" fill="rgb(242,107,0)" fg:x="11970261" fg:w="120940"/><text x="5.2311%" y="271.50"></text></g><g><title>cfree (53,565 samples, 0.02%)</title><rect x="5.0315%" y="277" width="0.0223%" height="15" fill="rgb(251,28,31)" fg:x="12091451" fg:w="53565"/><text x="5.2815%" y="287.50"></text></g><g><title>[libc.so.6] (53,565 samples, 0.02%)</title><rect x="5.0315%" y="261" width="0.0223%" height="15" fill="rgb(233,223,10)" fg:x="12091451" fg:w="53565"/><text x="5.2815%" y="271.50"></text></g><g><title>mio::poll::Poll::poll (360,265 samples, 0.15%)</title><rect x="5.0538%" y="277" width="0.1499%" height="15" fill="rgb(215,21,27)" fg:x="12145016" fg:w="360265"/><text x="5.3038%" y="287.50"></text></g><g><title>epoll_wait (360,265 samples, 0.15%)</title><rect x="5.0538%" y="261" width="0.1499%" height="15" fill="rgb(232,23,21)" fg:x="12145016" fg:w="360265"/><text x="5.3038%" y="271.50"></text></g><g><title>[unknown] (360,265 samples, 0.15%)</title><rect x="5.0538%" y="245" width="0.1499%" height="15" fill="rgb(244,5,23)" fg:x="12145016" fg:w="360265"/><text x="5.3038%" y="255.50"></text></g><g><title>[unknown] (360,265 samples, 0.15%)</title><rect x="5.0538%" y="229" width="0.1499%" height="15" fill="rgb(226,81,46)" fg:x="12145016" fg:w="360265"/><text x="5.3038%" y="239.50"></text></g><g><title>[unknown] (360,265 samples, 0.15%)</title><rect x="5.0538%" y="213" width="0.1499%" height="15" fill="rgb(247,70,30)" fg:x="12145016" fg:w="360265"/><text x="5.3038%" y="223.50"></text></g><g><title>[unknown] (360,265 samples, 0.15%)</title><rect x="5.0538%" y="197" width="0.1499%" height="15" fill="rgb(212,68,19)" fg:x="12145016" fg:w="360265"/><text x="5.3038%" y="207.50"></text></g><g><title>[unknown] (360,265 samples, 0.15%)</title><rect x="5.0538%" y="181" width="0.1499%" height="15" fill="rgb(240,187,13)" fg:x="12145016" fg:w="360265"/><text x="5.3038%" y="191.50"></text></g><g><title>[unknown] (360,265 samples, 0.15%)</title><rect x="5.0538%" y="165" width="0.1499%" height="15" fill="rgb(223,113,26)" fg:x="12145016" fg:w="360265"/><text x="5.3038%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (3,120,353 samples, 1.30%)</title><rect x="3.9053%" y="325" width="1.2985%" height="15" fill="rgb(206,192,2)" fg:x="9384930" fg:w="3120353"/><text x="4.1553%" y="335.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (1,279,527 samples, 0.53%)</title><rect x="4.6713%" y="309" width="0.5324%" height="15" fill="rgb(241,108,4)" fg:x="11225756" fg:w="1279527"/><text x="4.9213%" y="319.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (414,082 samples, 0.17%)</title><rect x="5.0314%" y="293" width="0.1723%" height="15" fill="rgb(247,173,49)" fg:x="12091201" fg:w="414082"/><text x="5.2814%" y="303.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (244,349 samples, 0.10%)</title><rect x="5.2038%" y="325" width="0.1017%" height="15" fill="rgb(224,114,35)" fg:x="12505283" fg:w="244349"/><text x="5.4538%" y="335.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (244,349 samples, 0.10%)</title><rect x="5.2038%" y="309" width="0.1017%" height="15" fill="rgb(245,159,27)" fg:x="12505283" fg:w="244349"/><text x="5.4538%" y="319.50"></text></g><g><title>cfree (201,542 samples, 0.08%)</title><rect x="5.3054%" y="293" width="0.0839%" height="15" fill="rgb(245,172,44)" fg:x="12749632" fg:w="201542"/><text x="5.5554%" y="303.50"></text></g><g><title>[libc.so.6] (201,542 samples, 0.08%)</title><rect x="5.3054%" y="277" width="0.0839%" height="15" fill="rgb(236,23,11)" fg:x="12749632" fg:w="201542"/><text x="5.5554%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3,842,955 samples, 1.60%)</title><rect x="3.9040%" y="341" width="1.5991%" height="15" fill="rgb(205,117,38)" fg:x="9381884" fg:w="3842955"/><text x="4.1540%" y="351.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (475,207 samples, 0.20%)</title><rect x="5.3054%" y="325" width="0.1977%" height="15" fill="rgb(237,72,25)" fg:x="12749632" fg:w="475207"/><text x="5.5554%" y="335.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (475,207 samples, 0.20%)</title><rect x="5.3054%" y="309" width="0.1977%" height="15" fill="rgb(244,70,9)" fg:x="12749632" fg:w="475207"/><text x="5.5554%" y="319.50"></text></g><g><title>mio::poll::Poll::poll (273,665 samples, 0.11%)</title><rect x="5.3893%" y="293" width="0.1139%" height="15" fill="rgb(217,125,39)" fg:x="12951174" fg:w="273665"/><text x="5.6393%" y="303.50"></text></g><g><title>epoll_wait (273,665 samples, 0.11%)</title><rect x="5.3893%" y="277" width="0.1139%" height="15" fill="rgb(235,36,10)" fg:x="12951174" fg:w="273665"/><text x="5.6393%" y="287.50"></text></g><g><title>[unknown] (273,665 samples, 0.11%)</title><rect x="5.3893%" y="261" width="0.1139%" height="15" fill="rgb(251,123,47)" fg:x="12951174" fg:w="273665"/><text x="5.6393%" y="271.50"></text></g><g><title>[unknown] (273,665 samples, 0.11%)</title><rect x="5.3893%" y="245" width="0.1139%" height="15" fill="rgb(221,13,13)" fg:x="12951174" fg:w="273665"/><text x="5.6393%" y="255.50"></text></g><g><title>[unknown] (273,665 samples, 0.11%)</title><rect x="5.3893%" y="229" width="0.1139%" height="15" fill="rgb(238,131,9)" fg:x="12951174" fg:w="273665"/><text x="5.6393%" y="239.50"></text></g><g><title>[unknown] (273,665 samples, 0.11%)</title><rect x="5.3893%" y="213" width="0.1139%" height="15" fill="rgb(211,50,8)" fg:x="12951174" fg:w="273665"/><text x="5.6393%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (141,567 samples, 0.06%)</title><rect x="6.1709%" y="325" width="0.0589%" height="15" fill="rgb(245,182,24)" fg:x="14829565" fg:w="141567"/><text x="6.4209%" y="335.50"></text></g><g><title>syscall (119,317 samples, 0.05%)</title><rect x="6.1802%" y="309" width="0.0497%" height="15" fill="rgb(242,14,37)" fg:x="14851815" fg:w="119317"/><text x="6.4302%" y="319.50"></text></g><g><title>[unknown] (119,317 samples, 0.05%)</title><rect x="6.1802%" y="293" width="0.0497%" height="15" fill="rgb(246,228,12)" fg:x="14851815" fg:w="119317"/><text x="6.4302%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (79,055 samples, 0.03%)</title><rect x="6.2299%" y="325" width="0.0329%" height="15" fill="rgb(213,55,15)" fg:x="14971132" fg:w="79055"/><text x="6.4799%" y="335.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (79,055 samples, 0.03%)</title><rect x="6.2299%" y="309" width="0.0329%" height="15" fill="rgb(209,9,3)" fg:x="14971132" fg:w="79055"/><text x="6.4799%" y="319.50"></text></g><g><title>__sched_yield (79,055 samples, 0.03%)</title><rect x="6.2299%" y="293" width="0.0329%" height="15" fill="rgb(230,59,30)" fg:x="14971132" fg:w="79055"/><text x="6.4799%" y="303.50"></text></g><g><title>[unknown] (79,055 samples, 0.03%)</title><rect x="6.2299%" y="277" width="0.0329%" height="15" fill="rgb(209,121,21)" fg:x="14971132" fg:w="79055"/><text x="6.4799%" y="287.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (498,310 samples, 0.21%)</title><rect x="7.2412%" y="277" width="0.2074%" height="15" fill="rgb(220,109,13)" fg:x="17401532" fg:w="498310"/><text x="7.4912%" y="287.50"></text></g><g><title>__close (498,310 samples, 0.21%)</title><rect x="7.2412%" y="261" width="0.2074%" height="15" fill="rgb(232,18,1)" fg:x="17401532" fg:w="498310"/><text x="7.4912%" y="271.50"></text></g><g><title>[unknown] (498,310 samples, 0.21%)</title><rect x="7.2412%" y="245" width="0.2074%" height="15" fill="rgb(215,41,42)" fg:x="17401532" fg:w="498310"/><text x="7.4912%" y="255.50"></text></g><g><title>[unknown] (498,310 samples, 0.21%)</title><rect x="7.2412%" y="229" width="0.2074%" height="15" fill="rgb(224,123,36)" fg:x="17401532" fg:w="498310"/><text x="7.4912%" y="239.50"></text></g><g><title>[unknown] (498,310 samples, 0.21%)</title><rect x="7.2412%" y="213" width="0.2074%" height="15" fill="rgb(240,125,3)" fg:x="17401532" fg:w="498310"/><text x="7.4912%" y="223.50"></text></g><g><title>[unknown] (498,310 samples, 0.21%)</title><rect x="7.2412%" y="197" width="0.2074%" height="15" fill="rgb(205,98,50)" fg:x="17401532" fg:w="498310"/><text x="7.4912%" y="207.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (217,522 samples, 0.09%)</title><rect x="7.4486%" y="277" width="0.0905%" height="15" fill="rgb(205,185,37)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="287.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (217,522 samples, 0.09%)</title><rect x="7.4486%" y="261" width="0.0905%" height="15" fill="rgb(238,207,15)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="271.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (217,522 samples, 0.09%)</title><rect x="7.4486%" y="245" width="0.0905%" height="15" fill="rgb(213,199,42)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="255.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (217,522 samples, 0.09%)</title><rect x="7.4486%" y="229" width="0.0905%" height="15" fill="rgb(235,201,11)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (217,522 samples, 0.09%)</title><rect x="7.4486%" y="213" width="0.0905%" height="15" fill="rgb(207,46,11)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="223.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (217,522 samples, 0.09%)</title><rect x="7.4486%" y="197" width="0.0905%" height="15" fill="rgb(241,35,35)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="207.50"></text></g><g><title>write (217,522 samples, 0.09%)</title><rect x="7.4486%" y="181" width="0.0905%" height="15" fill="rgb(243,32,47)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="191.50"></text></g><g><title>[unknown] (217,522 samples, 0.09%)</title><rect x="7.4486%" y="165" width="0.0905%" height="15" fill="rgb(247,202,23)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="175.50"></text></g><g><title>[unknown] (217,522 samples, 0.09%)</title><rect x="7.4486%" y="149" width="0.0905%" height="15" fill="rgb(219,102,11)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="159.50"></text></g><g><title>[unknown] (217,522 samples, 0.09%)</title><rect x="7.4486%" y="133" width="0.0905%" height="15" fill="rgb(243,110,44)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="143.50"></text></g><g><title>[unknown] (217,522 samples, 0.09%)</title><rect x="7.4486%" y="117" width="0.0905%" height="15" fill="rgb(222,74,54)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="127.50"></text></g><g><title>[unknown] (217,522 samples, 0.09%)</title><rect x="7.4486%" y="101" width="0.0905%" height="15" fill="rgb(216,99,12)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="111.50"></text></g><g><title>[unknown] (217,522 samples, 0.09%)</title><rect x="7.4486%" y="85" width="0.0905%" height="15" fill="rgb(226,22,26)" fg:x="17899842" fg:w="217522"/><text x="7.6986%" y="95.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (141,092 samples, 0.06%)</title><rect x="7.9495%" y="229" width="0.0587%" height="15" fill="rgb(217,163,10)" fg:x="19103696" fg:w="141092"/><text x="8.1995%" y="239.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::insert (141,092 samples, 0.06%)</title><rect x="7.9495%" y="213" width="0.0587%" height="15" fill="rgb(213,25,53)" fg:x="19103696" fg:w="141092"/><text x="8.1995%" y="223.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1,837,986 samples, 0.76%)</title><rect x="7.7142%" y="261" width="0.7648%" height="15" fill="rgb(252,105,26)" fg:x="18538183" fg:w="1837986"/><text x="7.9642%" y="271.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (1,837,734 samples, 0.76%)</title><rect x="7.7143%" y="245" width="0.7647%" height="15" fill="rgb(220,39,43)" fg:x="18538435" fg:w="1837734"/><text x="7.9643%" y="255.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (1,131,381 samples, 0.47%)</title><rect x="8.0082%" y="229" width="0.4708%" height="15" fill="rgb(229,68,48)" fg:x="19244788" fg:w="1131381"/><text x="8.2582%" y="239.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (361,770 samples, 0.15%)</title><rect x="8.4790%" y="229" width="0.1505%" height="15" fill="rgb(252,8,32)" fg:x="20376169" fg:w="361770"/><text x="8.7290%" y="239.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (361,770 samples, 0.15%)</title><rect x="8.4790%" y="213" width="0.1505%" height="15" fill="rgb(223,20,43)" fg:x="20376169" fg:w="361770"/><text x="8.7290%" y="223.50"></text></g><g><title>recv (361,770 samples, 0.15%)</title><rect x="8.4790%" y="197" width="0.1505%" height="15" fill="rgb(229,81,49)" fg:x="20376169" fg:w="361770"/><text x="8.7290%" y="207.50"></text></g><g><title>[unknown] (361,770 samples, 0.15%)</title><rect x="8.4790%" y="181" width="0.1505%" height="15" fill="rgb(236,28,36)" fg:x="20376169" fg:w="361770"/><text x="8.7290%" y="191.50"></text></g><g><title>[unknown] (361,770 samples, 0.15%)</title><rect x="8.4790%" y="165" width="0.1505%" height="15" fill="rgb(249,185,26)" fg:x="20376169" fg:w="361770"/><text x="8.7290%" y="175.50"></text></g><g><title>[unknown] (361,770 samples, 0.15%)</title><rect x="8.4790%" y="149" width="0.1505%" height="15" fill="rgb(249,174,33)" fg:x="20376169" fg:w="361770"/><text x="8.7290%" y="159.50"></text></g><g><title>[unknown] (361,770 samples, 0.15%)</title><rect x="8.4790%" y="133" width="0.1505%" height="15" fill="rgb(233,201,37)" fg:x="20376169" fg:w="361770"/><text x="8.7290%" y="143.50"></text></g><g><title>[unknown] (361,770 samples, 0.15%)</title><rect x="8.4790%" y="117" width="0.1505%" height="15" fill="rgb(221,78,26)" fg:x="20376169" fg:w="361770"/><text x="8.7290%" y="127.50"></text></g><g><title>&lt;tokio_socks::io::ReadExact&lt;R&gt; as core::future::future::Future&gt;::poll (902,560 samples, 0.38%)</title><rect x="8.4790%" y="261" width="0.3756%" height="15" fill="rgb(250,127,30)" fg:x="20376169" fg:w="902560"/><text x="8.7290%" y="271.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (902,560 samples, 0.38%)</title><rect x="8.4790%" y="245" width="0.3756%" height="15" fill="rgb(230,49,44)" fg:x="20376169" fg:w="902560"/><text x="8.7290%" y="255.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (540,790 samples, 0.23%)</title><rect x="8.6296%" y="229" width="0.2250%" height="15" fill="rgb(229,67,23)" fg:x="20737939" fg:w="540790"/><text x="8.8796%" y="239.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (540,790 samples, 0.23%)</title><rect x="8.6296%" y="213" width="0.2250%" height="15" fill="rgb(249,83,47)" fg:x="20737939" fg:w="540790"/><text x="8.8796%" y="223.50"></text></g><g><title>[libc.so.6] (114,618 samples, 0.05%)</title><rect x="8.8546%" y="261" width="0.0477%" height="15" fill="rgb(215,43,3)" fg:x="21278729" fg:w="114618"/><text x="9.1046%" y="271.50"></text></g><g><title>__socket (687,625 samples, 0.29%)</title><rect x="8.9023%" y="245" width="0.2861%" height="15" fill="rgb(238,154,13)" fg:x="21393351" fg:w="687625"/><text x="9.1523%" y="255.50"></text></g><g><title>[unknown] (687,625 samples, 0.29%)</title><rect x="8.9023%" y="229" width="0.2861%" height="15" fill="rgb(219,56,2)" fg:x="21393351" fg:w="687625"/><text x="9.1523%" y="239.50"></text></g><g><title>[unknown] (612,154 samples, 0.25%)</title><rect x="8.9337%" y="213" width="0.2547%" height="15" fill="rgb(233,0,4)" fg:x="21468822" fg:w="612154"/><text x="9.1837%" y="223.50"></text></g><g><title>[unknown] (612,154 samples, 0.25%)</title><rect x="8.9337%" y="197" width="0.2547%" height="15" fill="rgb(235,30,7)" fg:x="21468822" fg:w="612154"/><text x="9.1837%" y="207.50"></text></g><g><title>[unknown] (612,154 samples, 0.25%)</title><rect x="8.9337%" y="181" width="0.2547%" height="15" fill="rgb(250,79,13)" fg:x="21468822" fg:w="612154"/><text x="9.1837%" y="191.50"></text></g><g><title>[unknown] (612,154 samples, 0.25%)</title><rect x="8.9337%" y="165" width="0.2547%" height="15" fill="rgb(211,146,34)" fg:x="21468822" fg:w="612154"/><text x="9.1837%" y="175.50"></text></g><g><title>[unknown] (612,154 samples, 0.25%)</title><rect x="8.9337%" y="149" width="0.2547%" height="15" fill="rgb(228,22,38)" fg:x="21468822" fg:w="612154"/><text x="9.1837%" y="159.50"></text></g><g><title>[unknown] (612,154 samples, 0.25%)</title><rect x="8.9337%" y="133" width="0.2547%" height="15" fill="rgb(235,168,5)" fg:x="21468822" fg:w="612154"/><text x="9.1837%" y="143.50"></text></g><g><title>[unknown] (285,673 samples, 0.12%)</title><rect x="9.0696%" y="117" width="0.1189%" height="15" fill="rgb(221,155,16)" fg:x="21795303" fg:w="285673"/><text x="9.3196%" y="127.50"></text></g><g><title>[unknown] (285,673 samples, 0.12%)</title><rect x="9.0696%" y="101" width="0.1189%" height="15" fill="rgb(215,215,53)" fg:x="21795303" fg:w="285673"/><text x="9.3196%" y="111.50"></text></g><g><title>[unknown] (285,673 samples, 0.12%)</title><rect x="9.0696%" y="85" width="0.1189%" height="15" fill="rgb(223,4,10)" fg:x="21795303" fg:w="285673"/><text x="9.3196%" y="95.50"></text></g><g><title>[unknown] (285,673 samples, 0.12%)</title><rect x="9.0696%" y="69" width="0.1189%" height="15" fill="rgb(234,103,6)" fg:x="21795303" fg:w="285673"/><text x="9.3196%" y="79.50"></text></g><g><title>mio::net::tcp::stream::TcpStream::connect (1,232,343 samples, 0.51%)</title><rect x="8.9023%" y="261" width="0.5128%" height="15" fill="rgb(227,97,0)" fg:x="21393349" fg:w="1232343"/><text x="9.1523%" y="271.50"></text></g><g><title>connect (544,716 samples, 0.23%)</title><rect x="9.1884%" y="245" width="0.2267%" height="15" fill="rgb(234,150,53)" fg:x="22080976" fg:w="544716"/><text x="9.4384%" y="255.50"></text></g><g><title>[unknown] (544,712 samples, 0.23%)</title><rect x="9.1884%" y="229" width="0.2267%" height="15" fill="rgb(228,201,54)" fg:x="22080980" fg:w="544712"/><text x="9.4384%" y="239.50"></text></g><g><title>[unknown] (544,710 samples, 0.23%)</title><rect x="9.1884%" y="213" width="0.2267%" height="15" fill="rgb(222,22,37)" fg:x="22080982" fg:w="544710"/><text x="9.4384%" y="223.50"></text></g><g><title>[unknown] (473,306 samples, 0.20%)</title><rect x="9.2182%" y="197" width="0.1970%" height="15" fill="rgb(237,53,32)" fg:x="22152386" fg:w="473306"/><text x="9.4682%" y="207.50"></text></g><g><title>[unknown] (473,305 samples, 0.20%)</title><rect x="9.2182%" y="181" width="0.1970%" height="15" fill="rgb(233,25,53)" fg:x="22152387" fg:w="473305"/><text x="9.4682%" y="191.50"></text></g><g><title>[unknown] (473,305 samples, 0.20%)</title><rect x="9.2182%" y="165" width="0.1970%" height="15" fill="rgb(210,40,34)" fg:x="22152387" fg:w="473305"/><text x="9.4682%" y="175.50"></text></g><g><title>[unknown] (124,406 samples, 0.05%)</title><rect x="9.3633%" y="149" width="0.0518%" height="15" fill="rgb(241,220,44)" fg:x="22501286" fg:w="124406"/><text x="9.6133%" y="159.50"></text></g><g><title>[unknown] (124,398 samples, 0.05%)</title><rect x="9.3633%" y="133" width="0.0518%" height="15" fill="rgb(235,28,35)" fg:x="22501294" fg:w="124398"/><text x="9.6133%" y="143.50"></text></g><g><title>[unknown] (86,086 samples, 0.04%)</title><rect x="9.3793%" y="117" width="0.0358%" height="15" fill="rgb(210,56,17)" fg:x="22539606" fg:w="86086"/><text x="9.6293%" y="127.50"></text></g><g><title>[unknown] (86,086 samples, 0.04%)</title><rect x="9.3793%" y="101" width="0.0358%" height="15" fill="rgb(224,130,29)" fg:x="22539606" fg:w="86086"/><text x="9.6293%" y="111.50"></text></g><g><title>&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::register (668,638 samples, 0.28%)</title><rect x="9.4814%" y="197" width="0.2782%" height="15" fill="rgb(235,212,8)" fg:x="22784955" fg:w="668638"/><text x="9.7314%" y="207.50"></text></g><g><title>epoll_ctl (668,638 samples, 0.28%)</title><rect x="9.4814%" y="181" width="0.2782%" height="15" fill="rgb(223,33,50)" fg:x="22784955" fg:w="668638"/><text x="9.7314%" y="191.50"></text></g><g><title>[unknown] (668,638 samples, 0.28%)</title><rect x="9.4814%" y="165" width="0.2782%" height="15" fill="rgb(219,149,13)" fg:x="22784955" fg:w="668638"/><text x="9.7314%" y="175.50"></text></g><g><title>[unknown] (221,530 samples, 0.09%)</title><rect x="9.6674%" y="149" width="0.0922%" height="15" fill="rgb(250,156,29)" fg:x="23232063" fg:w="221530"/><text x="9.9174%" y="159.50"></text></g><g><title>[unknown] (221,530 samples, 0.09%)</title><rect x="9.6674%" y="133" width="0.0922%" height="15" fill="rgb(216,193,19)" fg:x="23232063" fg:w="221530"/><text x="9.9174%" y="143.50"></text></g><g><title>[unknown] (167,965 samples, 0.07%)</title><rect x="9.6897%" y="117" width="0.0699%" height="15" fill="rgb(216,135,14)" fg:x="23285628" fg:w="167965"/><text x="9.9397%" y="127.50"></text></g><g><title>[unknown] (167,965 samples, 0.07%)</title><rect x="9.6897%" y="101" width="0.0699%" height="15" fill="rgb(241,47,5)" fg:x="23285628" fg:w="167965"/><text x="9.9397%" y="111.50"></text></g><g><title>[unknown] (163,286 samples, 0.07%)</title><rect x="9.6917%" y="85" width="0.0679%" height="15" fill="rgb(233,42,35)" fg:x="23290307" fg:w="163286"/><text x="9.9417%" y="95.50"></text></g><g><title>__sched_yield (257,835 samples, 0.11%)</title><rect x="9.8927%" y="181" width="0.1073%" height="15" fill="rgb(231,13,6)" fg:x="23773496" fg:w="257835"/><text x="10.1427%" y="191.50"></text></g><g><title>[unknown] (232,419 samples, 0.10%)</title><rect x="9.9033%" y="165" width="0.0967%" height="15" fill="rgb(207,181,40)" fg:x="23798912" fg:w="232419"/><text x="10.1533%" y="175.50"></text></g><g><title>[unknown] (232,419 samples, 0.10%)</title><rect x="9.9033%" y="149" width="0.0967%" height="15" fill="rgb(254,173,49)" fg:x="23798912" fg:w="232419"/><text x="10.1533%" y="159.50"></text></g><g><title>[unknown] (232,419 samples, 0.10%)</title><rect x="9.9033%" y="133" width="0.0967%" height="15" fill="rgb(221,1,38)" fg:x="23798912" fg:w="232419"/><text x="10.1533%" y="143.50"></text></g><g><title>[unknown] (232,419 samples, 0.10%)</title><rect x="9.9033%" y="117" width="0.0967%" height="15" fill="rgb(206,124,46)" fg:x="23798912" fg:w="232419"/><text x="10.1533%" y="127.50"></text></g><g><title>[unknown] (232,419 samples, 0.10%)</title><rect x="9.9033%" y="101" width="0.0967%" height="15" fill="rgb(249,21,11)" fg:x="23798912" fg:w="232419"/><text x="10.1533%" y="111.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1,440,466 samples, 0.60%)</title><rect x="9.7596%" y="197" width="0.5994%" height="15" fill="rgb(222,201,40)" fg:x="23453593" fg:w="1440466"/><text x="10.0096%" y="207.50"></text></g><g><title>syscall (849,112 samples, 0.35%)</title><rect x="10.0057%" y="181" width="0.3533%" height="15" fill="rgb(235,61,29)" fg:x="24044947" fg:w="849112"/><text x="10.2557%" y="191.50"></text></g><g><title>[unknown] (849,112 samples, 0.35%)</title><rect x="10.0057%" y="165" width="0.3533%" height="15" fill="rgb(219,207,3)" fg:x="24044947" fg:w="849112"/><text x="10.2557%" y="175.50"></text></g><g><title>[unknown] (849,108 samples, 0.35%)</title><rect x="10.0057%" y="149" width="0.3533%" height="15" fill="rgb(222,56,46)" fg:x="24044951" fg:w="849108"/><text x="10.2557%" y="159.50"></text></g><g><title>[unknown] (849,106 samples, 0.35%)</title><rect x="10.0057%" y="133" width="0.3533%" height="15" fill="rgb(239,76,54)" fg:x="24044953" fg:w="849106"/><text x="10.2557%" y="143.50"></text></g><g><title>[unknown] (848,153 samples, 0.35%)</title><rect x="10.0061%" y="117" width="0.3529%" height="15" fill="rgb(231,124,27)" fg:x="24045906" fg:w="848153"/><text x="10.2561%" y="127.50"></text></g><g><title>[unknown] (841,235 samples, 0.35%)</title><rect x="10.0090%" y="101" width="0.3501%" height="15" fill="rgb(249,195,6)" fg:x="24052824" fg:w="841235"/><text x="10.2590%" y="111.50"></text></g><g><title>[unknown] (262,669 samples, 0.11%)</title><rect x="10.2497%" y="85" width="0.1093%" height="15" fill="rgb(237,174,47)" fg:x="24631390" fg:w="262669"/><text x="10.4997%" y="95.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (486,329 samples, 0.20%)</title><rect x="10.3590%" y="197" width="0.2024%" height="15" fill="rgb(206,201,31)" fg:x="24894059" fg:w="486329"/><text x="10.6090%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (368,664 samples, 0.15%)</title><rect x="10.4080%" y="181" width="0.1534%" height="15" fill="rgb(231,57,52)" fg:x="25011724" fg:w="368664"/><text x="10.6580%" y="191.50"></text></g><g><title>clock_gettime (368,664 samples, 0.15%)</title><rect x="10.4080%" y="165" width="0.1534%" height="15" fill="rgb(248,177,22)" fg:x="25011724" fg:w="368664"/><text x="10.6580%" y="175.50"></text></g><g><title>[[vdso]] (368,650 samples, 0.15%)</title><rect x="10.4080%" y="149" width="0.1534%" height="15" fill="rgb(215,211,37)" fg:x="25011738" fg:w="368650"/><text x="10.6580%" y="159.50"></text></g><g><title>[unknown] (359,616 samples, 0.15%)</title><rect x="10.4118%" y="133" width="0.1496%" height="15" fill="rgb(241,128,51)" fg:x="25020772" fg:w="359616"/><text x="10.6618%" y="143.50"></text></g><g><title>[unknown] (273,145 samples, 0.11%)</title><rect x="10.4477%" y="117" width="0.1137%" height="15" fill="rgb(227,165,31)" fg:x="25107243" fg:w="273145"/><text x="10.6977%" y="127.50"></text></g><g><title>[unknown] (273,145 samples, 0.11%)</title><rect x="10.4477%" y="101" width="0.1137%" height="15" fill="rgb(228,167,24)" fg:x="25107243" fg:w="273145"/><text x="10.6977%" y="111.50"></text></g><g><title>[unknown] (273,145 samples, 0.11%)</title><rect x="10.4477%" y="85" width="0.1137%" height="15" fill="rgb(228,143,12)" fg:x="25107243" fg:w="273145"/><text x="10.6977%" y="95.50"></text></g><g><title>[unknown] (273,145 samples, 0.11%)</title><rect x="10.4477%" y="69" width="0.1137%" height="15" fill="rgb(249,149,8)" fg:x="25107243" fg:w="273145"/><text x="10.6977%" y="79.50"></text></g><g><title>[unknown] (213,072 samples, 0.09%)</title><rect x="10.4727%" y="53" width="0.0887%" height="15" fill="rgb(243,35,44)" fg:x="25167316" fg:w="213072"/><text x="10.7227%" y="63.50"></text></g><g><title>[unknown] (117,916 samples, 0.05%)</title><rect x="10.5123%" y="37" width="0.0491%" height="15" fill="rgb(246,89,9)" fg:x="25262472" fg:w="117916"/><text x="10.7623%" y="47.50"></text></g><g><title>syscall (52,660 samples, 0.02%)</title><rect x="10.5614%" y="197" width="0.0219%" height="15" fill="rgb(233,213,13)" fg:x="25380388" fg:w="52660"/><text x="10.8114%" y="207.50"></text></g><g><title>[unknown] (52,660 samples, 0.02%)</title><rect x="10.5614%" y="181" width="0.0219%" height="15" fill="rgb(233,141,41)" fg:x="25380388" fg:w="52660"/><text x="10.8114%" y="191.50"></text></g><g><title>[unknown] (52,660 samples, 0.02%)</title><rect x="10.5614%" y="165" width="0.0219%" height="15" fill="rgb(239,167,4)" fg:x="25380388" fg:w="52660"/><text x="10.8114%" y="175.50"></text></g><g><title>[unknown] (52,660 samples, 0.02%)</title><rect x="10.5614%" y="149" width="0.0219%" height="15" fill="rgb(209,217,16)" fg:x="25380388" fg:w="52660"/><text x="10.8114%" y="159.50"></text></g><g><title>[unknown] (52,660 samples, 0.02%)</title><rect x="10.5614%" y="133" width="0.0219%" height="15" fill="rgb(219,88,35)" fg:x="25380388" fg:w="52660"/><text x="10.8114%" y="143.50"></text></g><g><title>[unknown] (52,660 samples, 0.02%)</title><rect x="10.5614%" y="117" width="0.0219%" height="15" fill="rgb(220,193,23)" fg:x="25380388" fg:w="52660"/><text x="10.8114%" y="127.50"></text></g><g><title>[unknown] (50,162 samples, 0.02%)</title><rect x="10.5624%" y="101" width="0.0209%" height="15" fill="rgb(230,90,52)" fg:x="25382886" fg:w="50162"/><text x="10.8124%" y="111.50"></text></g><g><title>[libc.so.6] (25,791 samples, 0.01%)</title><rect x="11.2440%" y="181" width="0.0107%" height="15" fill="rgb(252,106,19)" fg:x="27020804" fg:w="25791"/><text x="11.4940%" y="191.50"></text></g><g><title>[libc.so.6] (5,296,963 samples, 2.20%)</title><rect x="11.7013%" y="149" width="2.2042%" height="15" fill="rgb(206,74,20)" fg:x="28119631" fg:w="5296963"/><text x="11.9513%" y="159.50">[..</text></g><g><title>[libc.so.6] (5,296,963 samples, 2.20%)</title><rect x="11.7013%" y="133" width="2.2042%" height="15" fill="rgb(230,138,44)" fg:x="28119631" fg:w="5296963"/><text x="11.9513%" y="143.50">[..</text></g><g><title>[unknown] (757,972 samples, 0.32%)</title><rect x="13.5901%" y="117" width="0.3154%" height="15" fill="rgb(235,182,43)" fg:x="32658622" fg:w="757972"/><text x="13.8401%" y="127.50"></text></g><g><title>[unknown] (725,288 samples, 0.30%)</title><rect x="13.6037%" y="101" width="0.3018%" height="15" fill="rgb(242,16,51)" fg:x="32691306" fg:w="725288"/><text x="13.8537%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (6,353,771 samples, 2.64%)</title><rect x="11.2624%" y="181" width="2.6440%" height="15" fill="rgb(248,9,4)" fg:x="27065090" fg:w="6353771"/><text x="11.5124%" y="191.50">__..</text></g><g><title>posix_memalign (6,351,145 samples, 2.64%)</title><rect x="11.2635%" y="165" width="2.6429%" height="15" fill="rgb(210,31,22)" fg:x="27067716" fg:w="6351145"/><text x="11.5135%" y="175.50">po..</text></g><g><title>tokio::net::tcp::stream::TcpStream::new (10,899,531 samples, 4.54%)</title><rect x="9.4151%" y="261" width="4.5356%" height="15" fill="rgb(239,54,39)" fg:x="22625692" fg:w="10899531"/><text x="9.6651%" y="271.50">tokio..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (10,899,531 samples, 4.54%)</title><rect x="9.4151%" y="245" width="4.5356%" height="15" fill="rgb(230,99,41)" fg:x="22625692" fg:w="10899531"/><text x="9.6651%" y="255.50">tokio..</text></g><g><title>tokio::runtime::io::registration::Registration::new_with_interest_and_handle (10,813,616 samples, 4.50%)</title><rect x="9.4509%" y="229" width="4.4998%" height="15" fill="rgb(253,106,12)" fg:x="22711607" fg:w="10813616"/><text x="9.7009%" y="239.50">tokio..</text></g><g><title>tokio::runtime::io::driver::Handle::add_source (10,811,706 samples, 4.50%)</title><rect x="9.4517%" y="213" width="4.4990%" height="15" fill="rgb(213,46,41)" fg:x="22713517" fg:w="10811706"/><text x="9.7017%" y="223.50">tokio..</text></g><g><title>tokio::runtime::io::registration_set::RegistrationSet::allocate (8,092,175 samples, 3.37%)</title><rect x="10.5833%" y="197" width="3.3674%" height="15" fill="rgb(215,133,35)" fg:x="25433048" fg:w="8092175"/><text x="10.8333%" y="207.50">tok..</text></g><g><title>__rustc::__rust_no_alloc_shim_is_unstable_v2 (106,361 samples, 0.04%)</title><rect x="13.9064%" y="181" width="0.0443%" height="15" fill="rgb(213,28,5)" fg:x="33418862" fg:w="106361"/><text x="14.1564%" y="191.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (566,528 samples, 0.24%)</title><rect x="13.9507%" y="261" width="0.2357%" height="15" fill="rgb(215,77,49)" fg:x="33525223" fg:w="566528"/><text x="14.2007%" y="271.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (566,528 samples, 0.24%)</title><rect x="13.9507%" y="245" width="0.2357%" height="15" fill="rgb(248,100,22)" fg:x="33525223" fg:w="566528"/><text x="14.2007%" y="255.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (71,403 samples, 0.03%)</title><rect x="14.1567%" y="229" width="0.0297%" height="15" fill="rgb(208,67,9)" fg:x="34020348" fg:w="71403"/><text x="14.4067%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (71,403 samples, 0.03%)</title><rect x="14.1567%" y="213" width="0.0297%" height="15" fill="rgb(219,133,21)" fg:x="34020348" fg:w="71403"/><text x="14.4067%" y="223.50"></text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (16,010,857 samples, 6.66%)</title><rect x="7.5391%" y="277" width="6.6625%" height="15" fill="rgb(246,46,29)" fg:x="18117364" fg:w="16010857"/><text x="7.7891%" y="287.50">&lt;tokio::t..</text></g><g><title>tokio::task::coop::Budget::has_remaining (36,470 samples, 0.02%)</title><rect x="14.1864%" y="261" width="0.0152%" height="15" fill="rgb(246,185,52)" fg:x="34091751" fg:w="36470"/><text x="14.4364%" y="271.50"></text></g><g><title>[libc.so.6] (208,627 samples, 0.09%)</title><rect x="14.2016%" y="277" width="0.0868%" height="15" fill="rgb(252,136,11)" fg:x="34128221" fg:w="208627"/><text x="14.4516%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::time::sleep::Sleep&gt; (232,624 samples, 0.10%)</title><rect x="14.2886%" y="277" width="0.0968%" height="15" fill="rgb(219,138,53)" fg:x="34337266" fg:w="232624"/><text x="14.5386%" y="287.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::clear_entry (232,624 samples, 0.10%)</title><rect x="14.2886%" y="261" width="0.0968%" height="15" fill="rgb(211,51,23)" fg:x="34337266" fg:w="232624"/><text x="14.5386%" y="271.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (232,624 samples, 0.10%)</title><rect x="14.2886%" y="245" width="0.0968%" height="15" fill="rgb(247,221,28)" fg:x="34337266" fg:w="232624"/><text x="14.5386%" y="255.50"></text></g><g><title>&lt;mio::net::tcp::stream::TcpStream as mio::event::source::Source&gt;::deregister (75,738 samples, 0.03%)</title><rect x="14.3854%" y="229" width="0.0315%" height="15" fill="rgb(251,222,45)" fg:x="34569890" fg:w="75738"/><text x="14.6354%" y="239.50"></text></g><g><title>epoll_ctl (75,738 samples, 0.03%)</title><rect x="14.3854%" y="213" width="0.0315%" height="15" fill="rgb(217,162,53)" fg:x="34569890" fg:w="75738"/><text x="14.6354%" y="223.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="14.3854%" y="197" width="0.0315%" height="15" fill="rgb(229,93,14)" fg:x="34569890" fg:w="75738"/><text x="14.6354%" y="207.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="14.3854%" y="181" width="0.0315%" height="15" fill="rgb(209,67,49)" fg:x="34569890" fg:w="75738"/><text x="14.6354%" y="191.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="14.3854%" y="165" width="0.0315%" height="15" fill="rgb(213,87,29)" fg:x="34569890" fg:w="75738"/><text x="14.6354%" y="175.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="14.3854%" y="149" width="0.0315%" height="15" fill="rgb(205,151,52)" fg:x="34569890" fg:w="75738"/><text x="14.6354%" y="159.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="14.3854%" y="133" width="0.0315%" height="15" fill="rgb(253,215,39)" fg:x="34569890" fg:w="75738"/><text x="14.6354%" y="143.50"></text></g><g><title>[unknown] (75,738 samples, 0.03%)</title><rect x="14.3854%" y="117" width="0.0315%" height="15" fill="rgb(221,220,41)" fg:x="34569890" fg:w="75738"/><text x="14.6354%" y="127.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (300,265 samples, 0.12%)</title><rect x="14.4169%" y="229" width="0.1249%" height="15" fill="rgb(218,133,21)" fg:x="34645628" fg:w="300265"/><text x="14.6669%" y="239.50"></text></g><g><title>syscall (300,265 samples, 0.12%)</title><rect x="14.4169%" y="213" width="0.1249%" height="15" fill="rgb(221,193,43)" fg:x="34645628" fg:w="300265"/><text x="14.6669%" y="223.50"></text></g><g><title>[unknown] (300,265 samples, 0.12%)</title><rect x="14.4169%" y="197" width="0.1249%" height="15" fill="rgb(240,128,52)" fg:x="34645628" fg:w="300265"/><text x="14.6669%" y="207.50"></text></g><g><title>[unknown] (283,556 samples, 0.12%)</title><rect x="14.4238%" y="181" width="0.1180%" height="15" fill="rgb(253,114,12)" fg:x="34662337" fg:w="283556"/><text x="14.6738%" y="191.50"></text></g><g><title>[unknown] (283,556 samples, 0.12%)</title><rect x="14.4238%" y="165" width="0.1180%" height="15" fill="rgb(215,223,47)" fg:x="34662337" fg:w="283556"/><text x="14.6738%" y="175.50"></text></g><g><title>[unknown] (283,556 samples, 0.12%)</title><rect x="14.4238%" y="149" width="0.1180%" height="15" fill="rgb(248,225,23)" fg:x="34662337" fg:w="283556"/><text x="14.6738%" y="159.50"></text></g><g><title>[unknown] (283,556 samples, 0.12%)</title><rect x="14.4238%" y="133" width="0.1180%" height="15" fill="rgb(250,108,0)" fg:x="34662337" fg:w="283556"/><text x="14.6738%" y="143.50"></text></g><g><title>[unknown] (283,556 samples, 0.12%)</title><rect x="14.4238%" y="117" width="0.1180%" height="15" fill="rgb(228,208,7)" fg:x="34662337" fg:w="283556"/><text x="14.6738%" y="127.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (227,901 samples, 0.09%)</title><rect x="14.5418%" y="229" width="0.0948%" height="15" fill="rgb(244,45,10)" fg:x="34945893" fg:w="227901"/><text x="14.7918%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (227,718 samples, 0.09%)</title><rect x="14.5419%" y="213" width="0.0948%" height="15" fill="rgb(207,125,25)" fg:x="34946076" fg:w="227718"/><text x="14.7919%" y="223.50"></text></g><g><title>clock_gettime (227,718 samples, 0.09%)</title><rect x="14.5419%" y="197" width="0.0948%" height="15" fill="rgb(210,195,18)" fg:x="34946076" fg:w="227718"/><text x="14.7919%" y="207.50"></text></g><g><title>[[vdso]] (227,718 samples, 0.09%)</title><rect x="14.5419%" y="181" width="0.0948%" height="15" fill="rgb(249,80,12)" fg:x="34946076" fg:w="227718"/><text x="14.7919%" y="191.50"></text></g><g><title>[unknown] (227,718 samples, 0.09%)</title><rect x="14.5419%" y="165" width="0.0948%" height="15" fill="rgb(221,65,9)" fg:x="34946076" fg:w="227718"/><text x="14.7919%" y="175.50"></text></g><g><title>[unknown] (227,718 samples, 0.09%)</title><rect x="14.5419%" y="149" width="0.0948%" height="15" fill="rgb(235,49,36)" fg:x="34946076" fg:w="227718"/><text x="14.7919%" y="159.50"></text></g><g><title>[unknown] (227,718 samples, 0.09%)</title><rect x="14.5419%" y="133" width="0.0948%" height="15" fill="rgb(225,32,20)" fg:x="34946076" fg:w="227718"/><text x="14.7919%" y="143.50"></text></g><g><title>[unknown] (227,718 samples, 0.09%)</title><rect x="14.5419%" y="117" width="0.0948%" height="15" fill="rgb(215,141,46)" fg:x="34946076" fg:w="227718"/><text x="14.7919%" y="127.50"></text></g><g><title>[unknown] (225,308 samples, 0.09%)</title><rect x="14.5429%" y="101" width="0.0938%" height="15" fill="rgb(250,160,47)" fg:x="34948486" fg:w="225308"/><text x="14.7929%" y="111.50"></text></g><g><title>[unknown] (225,308 samples, 0.09%)</title><rect x="14.5429%" y="85" width="0.0938%" height="15" fill="rgb(216,222,40)" fg:x="34948486" fg:w="225308"/><text x="14.7929%" y="95.50"></text></g><g><title>[unknown] (225,308 samples, 0.09%)</title><rect x="14.5429%" y="69" width="0.0938%" height="15" fill="rgb(234,217,39)" fg:x="34948486" fg:w="225308"/><text x="14.7929%" y="79.50"></text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (608,186 samples, 0.25%)</title><rect x="14.3854%" y="245" width="0.2531%" height="15" fill="rgb(207,178,40)" fg:x="34569890" fg:w="608186"/><text x="14.6354%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::time::timeout::Timeout&lt;tokio_socks::tcp::socks4::Socks4Stream&lt;tokio::net::tcp::stream::TcpStream&gt;::connect&lt;core::net::socket_addr::SocketAddrV4,(core::net::ip_addr::Ipv4Addr,u16)&gt;::{{closure}}&gt;&gt; (682,329 samples, 0.28%)</title><rect x="14.3854%" y="277" width="0.2839%" height="15" fill="rgb(221,136,13)" fg:x="34569890" fg:w="682329"/><text x="14.6354%" y="287.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (682,329 samples, 0.28%)</title><rect x="14.3854%" y="261" width="0.2839%" height="15" fill="rgb(249,199,10)" fg:x="34569890" fg:w="682329"/><text x="14.6354%" y="271.50"></text></g><g><title>tokio::runtime::io::registration::Registration::handle (74,143 samples, 0.03%)</title><rect x="14.6385%" y="245" width="0.0309%" height="15" fill="rgb(249,222,13)" fg:x="35178076" fg:w="74143"/><text x="14.8885%" y="255.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (357,563 samples, 0.15%)</title><rect x="14.6693%" y="277" width="0.1488%" height="15" fill="rgb(244,185,38)" fg:x="35252219" fg:w="357563"/><text x="14.9193%" y="287.50"></text></g><g><title>rust_mc_proto_tokio::MinecraftConnection&lt;T&gt;::write_packet::_{{closure}} (537,822 samples, 0.22%)</title><rect x="14.8181%" y="277" width="0.2238%" height="15" fill="rgb(236,202,9)" fg:x="35609782" fg:w="537822"/><text x="15.0681%" y="287.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (535,339 samples, 0.22%)</title><rect x="14.8191%" y="261" width="0.2228%" height="15" fill="rgb(250,229,37)" fg:x="35612265" fg:w="535339"/><text x="15.0691%" y="271.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (535,338 samples, 0.22%)</title><rect x="14.8191%" y="245" width="0.2228%" height="15" fill="rgb(206,174,23)" fg:x="35612266" fg:w="535338"/><text x="15.0691%" y="255.50"></text></g><g><title>rust_mc_proto_tokio::data::writer::DataWriter::write_i32_varint::_{{closure}} (265,845 samples, 0.11%)</title><rect x="15.0419%" y="277" width="0.1106%" height="15" fill="rgb(211,33,43)" fg:x="36147604" fg:w="265845"/><text x="15.2919%" y="287.50"></text></g><g><title>&lt;rust_mc_proto_tokio::packet::Packet as rust_mc_proto_tokio::data::writer::DataWriter&gt;::write_bytes::_{{closure}} (265,845 samples, 0.11%)</title><rect x="15.0419%" y="261" width="0.1106%" height="15" fill="rgb(245,58,50)" fg:x="36147604" fg:w="265845"/><text x="15.2919%" y="271.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8&gt;&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (265,845 samples, 0.11%)</title><rect x="15.0419%" y="245" width="0.1106%" height="15" fill="rgb(244,68,36)" fg:x="36147604" fg:w="265845"/><text x="15.2919%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (265,845 samples, 0.11%)</title><rect x="15.0419%" y="229" width="0.1106%" height="15" fill="rgb(232,229,15)" fg:x="36147604" fg:w="265845"/><text x="15.2919%" y="239.50"></text></g><g><title>rust_mc_proto_tokio::data::writer::DataWriter::write_string::_{{closure}} (30,810 samples, 0.01%)</title><rect x="15.1525%" y="277" width="0.0128%" height="15" fill="rgb(254,30,23)" fg:x="36413449" fg:w="30810"/><text x="15.4025%" y="287.50"></text></g><g><title>&lt;rust_mc_proto_tokio::packet::Packet as rust_mc_proto_tokio::data::writer::DataWriter&gt;::write_bytes::_{{closure}} (30,810 samples, 0.01%)</title><rect x="15.1525%" y="261" width="0.0128%" height="15" fill="rgb(235,160,14)" fg:x="36413449" fg:w="30810"/><text x="15.4025%" y="271.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8&gt;&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (30,810 samples, 0.01%)</title><rect x="15.1525%" y="245" width="0.0128%" height="15" fill="rgb(212,155,44)" fg:x="36413449" fg:w="30810"/><text x="15.4025%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (199,032,429 samples, 82.82%)</title><rect x="15.1654%" y="277" width="82.8223%" height="15" fill="rgb(226,2,50)" fg:x="36444259" fg:w="199032429"/><text x="15.4154%" y="287.50">std::sys::pal::unix::time::Timespec::now</text></g><g><title>clock_gettime (199,032,429 samples, 82.82%)</title><rect x="15.1654%" y="261" width="82.8223%" height="15" fill="rgb(234,177,6)" fg:x="36444259" fg:w="199032429"/><text x="15.4154%" y="271.50">clock_gettime</text></g><g><title>[[vdso]] (198,399,902 samples, 82.56%)</title><rect x="15.4286%" y="245" width="82.5591%" height="15" fill="rgb(217,24,9)" fg:x="37076786" fg:w="198399902"/><text x="15.6786%" y="255.50">[[vdso]]</text></g><g><title>[unknown] (198,399,902 samples, 82.56%)</title><rect x="15.4286%" y="229" width="82.5591%" height="15" fill="rgb(220,13,46)" fg:x="37076786" fg:w="198399902"/><text x="15.6786%" y="239.50">[unknown]</text></g><g><title>[unknown] (196,149,722 samples, 81.62%)</title><rect x="16.3649%" y="213" width="81.6227%" height="15" fill="rgb(239,221,27)" fg:x="39326966" fg:w="196149722"/><text x="16.6149%" y="223.50">[unknown]</text></g><g><title>[unknown] (195,282,781 samples, 81.26%)</title><rect x="16.7257%" y="197" width="81.2620%" height="15" fill="rgb(222,198,25)" fg:x="40193907" fg:w="195282781"/><text x="16.9757%" y="207.50">[unknown]</text></g><g><title>[unknown] (195,282,781 samples, 81.26%)</title><rect x="16.7257%" y="181" width="81.2620%" height="15" fill="rgb(211,99,13)" fg:x="40193907" fg:w="195282781"/><text x="16.9757%" y="191.50">[unknown]</text></g><g><title>[unknown] (194,530,498 samples, 80.95%)</title><rect x="17.0387%" y="165" width="80.9489%" height="15" fill="rgb(232,111,31)" fg:x="40946190" fg:w="194530498"/><text x="17.2887%" y="175.50">[unknown]</text></g><g><title>[unknown] (194,530,498 samples, 80.95%)</title><rect x="17.0387%" y="149" width="80.9489%" height="15" fill="rgb(245,82,37)" fg:x="40946190" fg:w="194530498"/><text x="17.2887%" y="159.50">[unknown]</text></g><g><title>[unknown] (183,073,142 samples, 76.18%)</title><rect x="21.8064%" y="133" width="76.1812%" height="15" fill="rgb(227,149,46)" fg:x="52403546" fg:w="183073142"/><text x="22.0564%" y="143.50">[unknown]</text></g><g><title>std::time::SystemTime::now (117,089 samples, 0.05%)</title><rect x="97.9876%" y="277" width="0.0487%" height="15" fill="rgb(218,36,50)" fg:x="235476688" fg:w="117089"/><text x="98.2376%" y="287.50"></text></g><g><title>stress_test::main::{{closure}}::{{closure}} (223,154,535 samples, 92.86%)</title><rect x="6.4947%" y="293" width="92.8601%" height="15" fill="rgb(226,80,48)" fg:x="15607558" fg:w="223154535"/><text x="6.7447%" y="303.50">stress_test::main::{{closure}}::{{closure}}</text></g><g><title>tokio::time::sleep::sleep (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="277" width="1.3184%" height="15" fill="rgb(238,224,15)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="261" width="1.3184%" height="15" fill="rgb(241,136,10)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="271.50"></text></g><g><title>clock_gettime (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="245" width="1.3184%" height="15" fill="rgb(208,32,45)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="255.50"></text></g><g><title>[[vdso]] (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="229" width="1.3184%" height="15" fill="rgb(207,135,9)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="239.50"></text></g><g><title>[unknown] (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="213" width="1.3184%" height="15" fill="rgb(206,86,44)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="223.50"></text></g><g><title>[unknown] (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="197" width="1.3184%" height="15" fill="rgb(245,177,15)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="207.50"></text></g><g><title>[unknown] (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="181" width="1.3184%" height="15" fill="rgb(206,64,50)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="191.50"></text></g><g><title>[unknown] (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="165" width="1.3184%" height="15" fill="rgb(234,36,40)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="175.50"></text></g><g><title>[unknown] (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="149" width="1.3184%" height="15" fill="rgb(213,64,8)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="159.50"></text></g><g><title>[unknown] (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="133" width="1.3184%" height="15" fill="rgb(210,75,36)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="143.50"></text></g><g><title>[unknown] (3,168,316 samples, 1.32%)</title><rect x="98.0364%" y="117" width="1.3184%" height="15" fill="rgb(229,88,21)" fg:x="235593777" fg:w="3168316"/><text x="98.2864%" y="127.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (224,312,923 samples, 93.34%)</title><rect x="6.4947%" y="309" width="93.3421%" height="15" fill="rgb(252,204,47)" fg:x="15607558" fg:w="224312923"/><text x="6.7447%" y="319.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1,158,388 samples, 0.48%)</title><rect x="99.3548%" y="293" width="0.4820%" height="15" fill="rgb(208,77,27)" fg:x="238762093" fg:w="1158388"/><text x="99.6048%" y="303.50"></text></g><g><title>[libc.so.6] (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="549" width="98.3913%" height="15" fill="rgb(221,76,26)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="559.50">[libc.so.6]</text></g><g><title>[libc.so.6] (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="533" width="98.3913%" height="15" fill="rgb(225,139,18)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="543.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="517" width="98.3913%" height="15" fill="rgb(230,137,11)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="527.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="501" width="98.3913%" height="15" fill="rgb(212,28,1)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="485" width="98.3913%" height="15" fill="rgb(248,164,17)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="495.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="469" width="98.3913%" height="15" fill="rgb(222,171,42)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="479.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="453" width="98.3913%" height="15" fill="rgb(243,84,45)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="463.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="437" width="98.3913%" height="15" fill="rgb(252,49,23)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="447.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="421" width="98.3913%" height="15" fill="rgb(215,19,7)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="431.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="405" width="98.3913%" height="15" fill="rgb(238,81,41)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="415.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="389" width="98.3913%" height="15" fill="rgb(210,199,37)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="399.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="373" width="98.3913%" height="15" fill="rgb(244,192,49)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="383.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (236,446,819 samples, 98.39%)</title><rect x="1.4455%" y="357" width="98.3913%" height="15" fill="rgb(226,211,11)" fg:x="3473663" fg:w="236446819"/><text x="1.6955%" y="367.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (226,695,643 samples, 94.33%)</title><rect x="5.5032%" y="341" width="94.3336%" height="15" fill="rgb(236,162,54)" fg:x="13224839" fg:w="226695643"/><text x="5.7532%" y="351.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (224,870,295 samples, 93.57%)</title><rect x="6.2628%" y="325" width="93.5740%" height="15" fill="rgb(220,229,9)" fg:x="15050187" fg:w="224870295"/><text x="6.5128%" y="335.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>all (240,312,674 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(250,87,22)" fg:x="0" fg:w="240312674"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (237,523,628 samples, 98.84%)</title><rect x="1.1606%" y="565" width="98.8394%" height="15" fill="rgb(239,43,17)" fg:x="2789046" fg:w="237523628"/><text x="1.4106%" y="575.50">tokio-runtime-w</text></g><g><title>[unknown] (392,192 samples, 0.16%)</title><rect x="99.8368%" y="549" width="0.1632%" height="15" fill="rgb(231,177,25)" fg:x="239920482" fg:w="392192"/><text x="100.0868%" y="559.50"></text></g></svg></svg>